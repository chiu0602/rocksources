<?php
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'DatabaseQueryTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once '../DatabaseQuery.php';
require_once 'DatabaseRowTest.php';

/**
 * Test class for DatabaseQuery.
 * Generated by PHPUnit on 2008-05-06 at 09:23:23.
 */
class DatabaseQueryTest extends PHPUnit_Framework_TestCase
{
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('DatabaseQueryTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    protected $query;

    /**
     * @var dsn
     */
    //protected $dsn = 'pgsql:host=localhost port=5432 dbname=testdb user=dbrow password=dbrow';
    protected $dsn = 'sqlite::memory:';
    //protected $dsn = 'sqlite:querytest.sq3';

    /**
     * @var db
     */
    protected $db;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        try {
            $this->db = new PDO($this->dsn);
        }
        catch (PDOException $e) {
            $this->fail('Connect database error! ' . $e->getMessage());
        }
        $this->schema = new Schema('Schema_TestSchema.js');
        $this->table = 'Database_RowTest';

        $params->db = $this->db;
        $params->schema = $this->schema;

        $this->query = new DatabaseQuery($params);
        /* the other way is:
        $this->object = new Database_Row(array(
            'db'        => $this->db,
            'schema'    => new Schema('Schema_TestSchema.js')
        ));
        */

        $this->db->query('CREATE TABLE "'.$this->table.'" (
            id int primary key unique,
            name varchar(40) not null,
            password varchar(40) not null,
            permission int default 0,
            email varchar(255)
        );');

        $passwordSchema = $params->schema->table($this->table)->password;
        //$encodedPassword = $passwordSchema->encode('1');

        for ($i = 1; $i <= 10; $i++) {
            $data['id'] = $i;
            $data['name'] = 'rock' . $i;
            $data['password'] = $passwordSchema->encode($i);
            $data['email'] = "rock$i@abc$i.com";

            $stat = $this->db->prepare('insert into ' . $this->table
                . '(id, name, password, email) '
                . 'values (:id, :name, :password, :email)');
            $stat->execute($data);
        }

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
        $this->db->exec('DELETE * FROM ' . $this->table);
    }

    /**
     * @test
     */
    public function prepare() {
        $s = ':id=?';
        $args = array('id' => 10);

        $prepared = $this->query->prepare($s, $args);
        $this->assertEquals(
            "\"id\"='10'",
            $prepared
        );

        $s = 'where :a = ? and :b =?';
        $args = array('a' => 1, 'b' => "I'm rock");

        $prepared = $this->query->prepare($s, $args);
        $this->assertEquals(
            "where \"a\" = '1' and \"b\" ='I''m rock'",
            $prepared
        );


        $s = ':a > ? or :a = :name and :name !=? and :c <> abs(:d) or :dd or :d';
        $args = array('a' => 1, 'name' => "I'm rock");

        $prepared = $this->query->prepare($s, $args);
        $this->assertEquals(
            "\"a\" > '1' or \"a\" = \"name\" and \"name\" <>'I''m rock' and \"c\" <> abs(\"d\") or \"dd\" or \"d\"",
            $prepared
        );


        $s = 'select :id, :name, :birthday from :profile where :age >= ?;';
        $args = array('age' => '20');

        $prepared = $this->query->prepare($s, $args);
        $this->assertEquals(
            "select \"id\", \"name\", \"birthday\" from \"profile\" where \"age\" >= '20';",
            $prepared
        );
    }

    /**
     * @test
     */
    public function select_all() {
        $results = $this->query->from('Test')->select();
        $this->assertFalse($results);
        $this->assertEquals(
            'SELECT * FROM "Test";',
            $this->query->getLastQueryString() );
    }
    
    /**
     * @expectedException Exception
     */
    public function name_with_double_quote_char() {
        $this->query->from('Te"st')->select();
    }

    /**
     * @test
     */
    public function select_id() {
        $this->query->from('Test')->select('id');
        $this->assertEquals(
            'SELECT "id" FROM "Test";',
            $this->query->getLastQueryString() );
    }

    /**
     * @test
     */
    public function select_id_name() {
        $this->query->from('Test')->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test";',
            $this->query->getLastQueryString() );
    }

    /**
     * @test
     */
    public function select_id_name_expr() {
        $this->query->from('Test')->select(array('id', 'name',
            'age' => $this->query->prepare('abs(:age)', array('age'=>'') ),
            'nage' => $this->query->prepare('-:age', array('age'=>'') )
            )
        );

        $this->assertEquals(
            'SELECT "id", "name", abs("age") AS "age", -"age" AS "nage" FROM "Test";',
            $this->query->getLastQueryString() );
    }

    /**
     * @test
     */
    public function select_id_name_where_id_op_10() {
        $this->query->from('Test')
            ->where(array('id' => 10))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" = \'10\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->where(array('id >' => 10))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" > \'10\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->where(array('id !=' => 10))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" <> \'10\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->where(array('id' => 10, 'name' => 'rock', 'age' => 30))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" = \'10\' AND "name" = \'rock\' AND "age" = \'30\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->where(array(':id != ? AND :name <> ?' => array('id' => 10, 'name' => 'rock')))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" <> \'10\' AND "name" <> \'rock\';',
            $this->query->getLastQueryString()
        );

    }

    /**
     * @test
     */
    public function select_id_name_or_where() {
        $this->query->from('Test')
            ->or_where(array('id >' => 10))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" > \'10\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->or_where(array('id' => 10, 'name' => 'rock', 'age' => 30))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" = \'10\' OR "name" = \'rock\' OR "age" = \'30\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->or_where(array(':id != ? OR :name <> ?' => array('id' => 10, 'name' => 'rock')))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" <> \'10\' OR "name" <> \'rock\';',
            $this->query->getLastQueryString()
        );

    }

    /**
     * @test
     */
    public function select_id_name_like() {
        $this->query->from('Test')
            ->like(array('id' => 10))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" LIKE \'%10%\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->like(array('id' => 10, 'name' => 'rock', 'age' => 30))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" LIKE \'%10%\' AND "name" LIKE \'%rock%\' AND "age" LIKE \'%30%\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->like(array(':id != ? OR :name <> ?' => array('id' => 10, 'name' => 'rock')))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" <> \'10\' OR "name" <> \'rock\';',
            $this->query->getLastQueryString()
        );

    }

    /**
     * @test
     */
    public function select_id_name_or_like() {
        $this->query->from('Test')
            ->or_like(array('id' => 10))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" LIKE \'%10%\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->or_like(array('id' => 10, 'name' => 'rock', 'age' => 30))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" LIKE \'%10%\' OR "name" LIKE \'%rock%\' OR "age" LIKE \'%30%\';',
            $this->query->getLastQueryString()
        );

        $this->query->from('Test')
            ->or_like(array(':id != ? OR :name <> ?' => array('id' => 10, 'name' => 'rock')))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "id" <> \'10\' OR "name" <> \'rock\';',
            $this->query->getLastQueryString()
        );

    }

    /**
     * @test
     */
    public function select_id_name_group_by_party() {
        $this->query->from('Test')
            ->where(array('age >' => 18))
            ->group_by(array('party'))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "age" > \'18\' GROUP BY "party";',
            $this->query->getLastQueryString()
        );

        $total_qty_expr = $this->query->prepare('SUM(:qty)', array('qty' => ''));
        $this->query->from('Test')
            ->where(array('qty >' => 30))
            ->group_by('id')
            ->select(array('id', 'total_qty' => $total_qty_expr));
        $this->assertEquals(
            'SELECT "id", SUM("qty") AS "total_qty" FROM "Test" WHERE "qty" > \'30\' GROUP BY "id";',
            $this->query->getLastQueryString()
        );

    }

    /**
     * @test
     */
    public function select_id_name_order_by_party() {
        $this->query->from('Test')
            ->where(array('age >' => 18))
            ->order_by(array('id', 'age'))
            ->select(array('id', 'name'));
        $this->assertEquals(
            'SELECT "id", "name" FROM "Test" WHERE "age" > \'18\' ORDER BY "id", "age";',
            $this->query->getLastQueryString()
        );

        $total_qty_expr = $this->query->prepare('SUM(:qty)', array('qty' => ''));
        $this->query->from('Test')
            ->where(array('qty >' => 30))
            ->group_by('id')
            ->order_by('total_qty')
            ->select(array('id', 'total_qty' => $total_qty_expr));
        $this->assertEquals(
            'SELECT "id", SUM("qty") AS "total_qty" FROM "Test" WHERE "qty" > \'30\' GROUP BY "id" ORDER BY "total_qty";',
            $this->query->getLastQueryString()
        );

    }

    /**
     * @test
     */
    public function select_data() {
        $results = $this->query->from($this->table)->select();
        $this->assertTrue( !empty($results) );
        $this->assertEquals(10, count($results) );
        $this->assertEquals('****', $results[0]->password); //decode by mask

        $results = $this->query->from($this->table)->select(array('id', 'password'), DatabaseQuery::DISABLE_DECODE);
        $this->assertTrue( !empty($results) );
        $this->assertEquals(10, count($results) );
        $this->assertFalse( isset($results[0]->name) );

        $results = $this->query
            ->from($this->table)
            ->where(array('id' => '5'))
            ->select();
        $this->assertTrue( !empty($results) );
        $this->assertEquals(1, count($results) );
        $this->assertEquals('5', $results[0]->id);

        $results = $this->query
            ->from($this->table)
            ->or_where(array('id <' => '2', 'id >' => '8'))
            ->order_by('id')
            ->select();
        $this->assertTrue( !empty($results) );
        $this->assertEquals(3, count($results) );
        $this->assertEquals('1', $results[0]->id);
        $this->assertEquals('9', $results[1]->id);
        $this->assertEquals('10', $results[2]->id);

    }

    /**
     * @test
     */
    public function select_password() {
        $passwordSchema = $this->schema->table($this->table)->password;
        $encodedPassword = $passwordSchema->encode('1');
        
        $results = $this->query->from($this->table)
            ->where(array('password' => 1))
            ->select();

        //echo $this->query->getLastQueryString(), "\n";
        $this->assertFalse( empty($results) );
        $this->assertEquals(1, count($results) );
        $this->assertEquals('****', $results[0]->password); //decode by mask

        $results = $this->query->from($this->table)
            ->where(array('password' => 1))
            ->select(array('id', 'password'), DatabaseQuery::DISABLE_DECODE);

        $this->assertFalse( empty($results) );
        $this->assertEquals(1, count($results) );
        $this->assertEquals($encodedPassword, $results[0]->password); //raw data

    }

    /**
     * @test
     */
    public function select_data_style_assoc() {
        $passwordSchema = $this->schema->table($this->table)->password;
        $encodedPassword = $passwordSchema->encode('1');

        $results = $this->query->from($this->table)
                    ->select(PDO::FETCH_ASSOC);

        $this->assertTrue( !empty($results) );
        $this->assertEquals(10, count($results) );
        $this->assertTrue(is_array($results[0]));
        $this->assertEquals('****', $results[0]['password']); //decode by mask

        $results = $this->query->from($this->table)
            ->select('name', 'password', PDO::FETCH_ASSOC, DatabaseQuery::DISABLE_DECODE);

        $this->assertTrue( !empty($results) );
        $this->assertEquals(10, count($results) );
        $this->assertTrue(is_array($results[0]));
        $this->assertArrayHasKey('name', $results[0]);
        $this->assertArrayHasKey('password', $results[0]);
        $this->assertFalse(isset($results[0]['id']));
        $this->assertRegExp('/^rock\d+/', $results[0]['name']);
        $this->assertEquals($encodedPassword, $results[0]['password']); //raw data
    }

    /**
     * @test
     */
    public function select_data_style_class() {
        $results = $this->query->from($this->table)
                    ->select(PDO::FETCH_CLASS);

        $this->assertTrue( !empty($results) );
        $this->assertEquals(10, count($results) );
        $this->assertTrue(is_a($results[0], 'DatabaseRow'));
        $this->assertRegExp('/^rock\d+/', $results[0]->name);
        $this->assertRegExp('/^rock\d+/', $results[0]['name']);
        $this->assertEquals('****', $results[0]->password); //decode by mask
        $this->assertEquals('****', $results[0]['password']); //decode by mask

    }

    /**
     * See issue 4.
     * @test
     */
    public function select_incorrect_field_name() {
        $results = $this->query->from($this->table)
            ->where(array('idx' => ''))
            ->select();
        $this->assertTrue(empty($results));
    }
}

// Call DatabaseRowTest::main() if this source file is executed directly. if
if (PHPUnit_MAIN_METHOD == 'DatabaseQueryTest::main') {
    DatabaseQueryTest::main();
}

?>
