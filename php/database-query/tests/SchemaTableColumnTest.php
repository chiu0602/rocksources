<?php
// Call SchemaTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'SchemaTableColumnTest::main');
}

require_once 'PHPUnit/Framework.php';
require_once realpath(dirname(__FILE__)) . '/../Schema.php';

/**
 * Test class for Schema.
 * Generated by PHPUnit on 2008-05-14 at 09:40:20.
 */
class SchemaTableColumnTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Schema
     * @access protected
     */
    protected $userSchema;
    
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('SchemaTableColumnTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
        $this->schema = new Schema(realpath(dirname(__FILE__)).'/Schema_TestSchema.js');
        $this->userSchema = $this->schema->table('Database_RowTest');
    }

    /**
     */
    public function testProperty() {
        foreach ($this->userSchema->columnList() as $name) {
            $column = $this->userSchema->column($name);
            $this->assertTrue( isset($column->type) );
            $this->assertTrue( isset($column->default) );
            $this->assertFalse( isset($column->propertyNotExists) );
        }

    }

    public function testIsValid() {
        $column = $this->userSchema->column('email');

        $this->assertTrue($column->isValid(''));
        $this->assertTrue($column->isValid('abc@com'));
        $this->assertFalse($column->isValid('abc'));
    }

    /**
     */
    public function testEncode() {
        $column = $this->userSchema->column('password');
        $plainPassword = '123';
        $this->assertEquals(md5($plainPassword), $column->encode($plainPassword));
    }
    
    public static function mask($d) {
        return 'xxxx';
    }

    public function testDecode() {
        $schema = new Schema(array(
            'Table1' => array(
                'field1' => array(
                    'type'  => 'string',
                    'encoder' => 'Php::md5',
                    'decoder' => 'SchemaTableColumnTest::mask'
                ),
                'field2' => true
            )
        ));

        $column = $schema->table('Table1')->column('field1');
        $plainText = '321';
        $this->assertEquals(md5($plainText), $column->encode($plainText));
        $this->assertEquals(self::mask($plainText), $column->decode($plainText));
    }

    public function testGerPredefinedPatterns() {
        $patterns = SchemaTableColumn::getPredefinedPatterns();
        $this->assertTrue( is_array($patterns) );
        $this->assertTrue( isset($patterns['pattern_email']) );
    }

    public function testPattern() {
        $schema = new Schema(array(
            'Table1' => array(
                'field1' => array(
                    'type'  => 'int',
                    'pattern' => 'ctype_digit'
                ),
                'field2' => array(
                    'type'  => 'string',
                    'pattern' => '^\S{3}-\d{4}$'
                ),
                'field3' => array(
                    'type'  => 'string',
                    'pattern' => 'pattern_email'
                ),
            )
        ));

        $field1 = $schema->table('Table1')->column('field1');
        $this->assertTrue( $field1->isValid('123'));
        $this->assertTrue( $field1->isValid(123));
        $this->assertFalse($field1->isValid(''));
        $this->assertFalse($field1->isValid('abc'));

        $field2 = $schema->table('Table1')->column('field2');
        $this->assertFalse($field2->isValid('123'));
        $this->assertFalse($field2->isValid(''));
        $this->assertFalse($field2->isValid('a c-1234'));
        $this->assertFalse($field2->isValid('abc-d234'));
        $this->assertTrue( $field2->isValid('abc-1234'));

        $field3 = $schema->table('Table1')->column('field3');
        $this->assertFalse($field3->isValid('123'));
        $this->assertFalse($field3->isValid(''));
        $this->assertFalse($field3->isValid('abc.com'));
        $this->assertTrue( $field3->isValid('rock@abc.com'));

    }

}

// Call SchemaTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'SchemaTableColumnTest::main') {
    SchemaTableColumnTest::main();
}
?>
